-> part 1: setup for flask deployment on heroku  
    -> introduction to deploying flask apps on heroku  
    -> heroku simplifies deployment with a user-friendly platform  
    -> heroku is a platform as a service (paas) introduced in 2007  
    -> provides eco and basic tiers suitable for personal projects  
    -> ideal for launching projects to a wider audience  
    -> heroku's paas handles deployment tasks for you  

-> getting started with heroku  
    -> create a free account on heroku  
    -> install heroku cli (command line interface)  
    -> create your app on heroku using the cli  

-> installing heroku cli  
    -> on macos: use `brew install heroku/brew/heroku`  
    -> on ubuntu: use `sudo snap install --classic heroku`  
    -> log in to heroku cli via terminal and browser  
    -> optionally connect your github repository to heroku  

-> manage secrets in heroku  
    -> secrets like the secret_key must remain private  
    -> avoid pushing sensitive data like passwords or api keys to github  
    -> if secrets are exposed, immediately rotate them to maintain security  

-> local solutions for managing secrets  
    -> store secrets in a separate python file (e.g., `secrets.py`)  
    -> use `.gitignore` to exclude sensitive files from version control  
    -> use environment variables stored in virtual environments  
    -> use the `dotenv` package to manage variables securely  

-> setting config vars through heroku cli  
    -> set environment variables using `heroku config:set` command  
    -> example: `heroku config:set secret_key=<your_secret_key>`  
    -> use `heroku config` to view current environment variables  
    -> ensure secret keys are long and hard to crack  

-> using uuid for secret keys  
    -> generate random keys using pythonâ€™s `uuid` module  
    -> example: `python -c "import uuid; print(uuid.uuid4().hex)"`  

-> setting config vars through heroku dashboard  
    -> access the heroku dashboard and go to the "settings" tab  
    -> use the "reveal config vars" button to manage environment variables  
    -> add variables like secret_key, flask_app, flask_debug, and others  

-> recommended environment variables  
    -> set `flask_app` to your main app file (e.g., `ragtime.py`)  
    -> set `flask_debug` to `0` to disable debugging in production  
    -> set `flask_config` to `heroku`  
    -> set email credentials (`mail_username` and `mail_password`)  

-> why use the heroku dashboard?  
    -> the heroku dashboard provides a convenient web interface for managing deployed apps  
    -> allows setting and monitoring environment variables  
    -> offers a pre-defined method to interact with your app  

-> secrets saved!  
    -> setting config vars properly is crucial to a successful deployment  
    -> use heroku cli or dashboard to ensure secrets are securely handled  
    -> part 2 of the tutorial will cover further steps to avoid app breakage  

-> summary of part 1: setup for flask deployment on heroku  
    -> learned about heroku as a paas for simplifying flask app deployment  
    -> installed heroku cli and logged in via terminal  
    -> created a heroku app and learned to manage secrets securely  
    -> part 2 will dive deeper into configuration for deployment  
