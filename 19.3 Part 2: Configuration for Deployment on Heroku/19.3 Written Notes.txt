-> part 2: configuration for deployment on heroku  
    -> focuses on configuring your flask app for deployment on heroku  
    -> involves managing environment variables, setting up security features, and configuring the database  
    -> this lesson builds on part 1 and sets the stage for part 3  
    -> important tasks include setting secret_key, flask_config, and postgresql configurations for production  

-> prepare for deployment on heroku  
    -> config vars need to be set on heroku for proper app deployment  
    -> secret_key must be defined using a long random string for security  
    -> flask_config is used to manage different configurations for different environments  
    -> the default value is set in case the variable is not found in config vars, but should never be used in production  

-> production configuration  
    -> productionconfig class is used to define production settings  
    -> example config includes sqlalchemy database_uri, which connects to a postgresql database  
    -> utilises logging to capture errors and send notifications via email using smtphandler  
    -> database url can be set using environment variables or default to sqlite for local testing  

-> heroku specific configuration  
    -> heroku requires custom configurations that are tailored to its platform  
    -> heroku logs more than just errors, so additional logging for info and warning messages is captured  
    -> the herokoconfig class inherits from productionconfig, adding heroku-specific adjustments like logging to stderr  
    -> includes setting database_url for postgresql as heroku doesn’t support sqlite  

-> connect flask to heroku with a procfile  
    -> a procfile is required for heroku to know how to run your app  
    -> the procfile specifies the process type (e.g., web) and the entry point (e.g., using gunicorn)  
    -> gunicorn is the recommended production web server for flask apps on heroku  
    -> the procfile does not have an extension, and should be named exactly 'procfile'  

-> installing gunicorn  
    -> gunicorn is a python wsgi http server required for handling communication between flask and the web  
    -> install gunicorn via pip to integrate it with flask for deployment  

-> security  
    -> security is critical when deploying flask apps to production  
    -> adding tls (transport layer security) with flask-talisman ensures that data is encrypted between client and server  
    -> https is required for production, and flask-talisman helps to enforce this  
    -> additional content security policies can be set to prevent loading unsafe resources  

-> adding encryption to requests  
    -> http is not secure enough for production apps, and https is recommended  
    -> flask-talisman is used to enforce https and protect against common web security threats  
    -> by default, flask-talisman restricts scripts and styles from outside the app, but this can be adjusted to allow resources like bootstrap  

-> cross-site request forgery (csrf) protection  
    -> csrf protection is crucial for preventing malicious requests from other sites  
    -> flask-wtf’s csrfprotect extension can be used to add protection globally across the app  
    -> csrf protection is added to the app’s forms and non-form endpoints  
    -> werkzeug’s proxyfix middleware is used to fix issues caused by heroku’s reverse proxy server  

-> deployment tasks  
    -> deployment tasks such as database migrations and role creation are automated with flask cli commands  
    -> a custom `deploy` command is defined to migrate the database and insert necessary roles  
    -> these tasks ensure the app is correctly set up after deployment and reduce human error  

-> top-level file  
    -> a top-level `requirements.txt` file must be created for heroku to track dependencies  
    -> for heroku deployment, dependencies specific to the platform, like gunicorn and flask-talisman, should be included  
    -> the `requirements.txt` file includes all the necessary libraries for heroku to install during deployment  

-> summary: configuration for flask deployment on heroku  
    -> this lesson covered environment variables, app security, and configuring a production environment for flask on heroku  
    -> emphasised the importance of setting up flask-talisman for https, csrf protection, and proper database configuration  
    -> demonstrated how to create a `procfile` for heroku and configure dependencies with a `requirements.txt` file  
