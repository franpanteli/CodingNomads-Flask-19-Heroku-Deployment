-> welcome to part 3 of the flask deployment tutorial series  
    -> in this part, you will learn how to use git for deployment on heroku  
    -> you will also learn how to create a heroku app and debug your deployment  

-> integrating heroku with git  
    -> heroku has a seamless integration with git, making deployment easy  
    -> four steps are involved in deploying your app with git  
        -> put your project code under version control with git  
        -> create a heroku app  
        -> add a remote to your repository  
        -> push your code to the remote  

-> git version control  
    -> if you haven't already, put your project under version control with git  
    -> to do this, go to the root folder of your project in the terminal  
        -> run `git init` to initialise a new git repository  
        -> add and commit everything, except files containing sensitive information  
    -> your project is now under version control  

-> create a heroku app  
    -> you can create a heroku app through the heroku dashboard or via the heroku cli  
    -> the name you give your app will be part of the url  
        -> choose a name that is easy to remember, and ensure it's available  
    -> if you created your app through the heroku cli, it automatically sets the remote for you  

-> add the remote  
    -> if the app was created through the cli, this step is already done  
    -> to check if the remote is set up, run `git remote -v`  
        -> the remote should be listed as `heroku` with the appropriate url  

-> push your code  
    -> push your code to heroku using the command `git push heroku master`  
        -> this deploys your app to heroku under the specified url  

-> run deploy tasks  
    -> after pushing the code, initiate deployment tasks that were previously created  
    -> to restart the app and ensure a clean start, run the command `heroku restart`  
    -> once deployment finishes, the heroku cli will show the url of your deployed app  
    -> your app is now live and accessible to anyone on the internet  

-> debugging deployment  
    -> if your app isn't working as expected, you can troubleshoot using these methods  

-> check the logs  
    -> use `heroku logs` to view your app's log messages from the terminal  
        -> optionally, use `-t` to continually receive incoming messages  

-> try running locally  
    -> heroku cli allows you to "dry run" your deployment locally using the `heroku local` command  
    -> set up environment variables manually, as heroku won't grab them for you  
        -> do not commit this file to version control  
        -> add `.env` to your `.gitignore` file  

-> check (un)committed files  
    -> make sure all necessary files are committed to your git repository  
        -> check for any files you might have forgotten to commit or push  

-> summary: flask deployment on heroku  
    -> in this series, you have:  
        -> gotten familiar with heroku and the heroku cli  
        -> managed environment variables on heroku  
        -> set up tls and csrf protection for security  
        -> completed deployment tasks using flask cli commands  
        -> written a `procfile` to declare how heroku should run your app  
        -> created a `requirements.txt` for dependency tracking  
        -> deployed your app using git by setting up a remote and pushing your code  
        -> explored debugging methods like checking logs and testing locally  
